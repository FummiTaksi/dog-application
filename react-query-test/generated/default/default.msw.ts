/**
 * Generated by orval v6.6.0 🍺
 * Do not edit manually.
 * Dog API
 * The Dog API description
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'
import type {
  Dog,
  Human
} from '.././model'

export const getAppControllerGetHelloMock = () => (faker.random.word())

export const getDogControllerCreateMock = () => ({id: faker.random.word(), size: faker.helpers.randomize(['Small','Medium','Large']), owner: {id: faker.random.word(), name: faker.random.word(), dogs: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), size: faker.helpers.randomize(['Small','Medium','Large'])}))}})

export const getDogControllerAddOwnerMock = () => ({id: faker.random.word(), size: faker.helpers.randomize(['Small','Medium','Large']), owner: {id: faker.random.word(), name: faker.random.word(), dogs: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), size: faker.helpers.randomize(['Small','Medium','Large'])}))}})

export const getHumanControllerCreateMock = () => ({id: faker.random.word(), name: faker.random.word(), dogs: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), size: faker.helpers.randomize(['Small','Medium','Large']), owner: {id: faker.random.word(), name: faker.random.word()}}))})

export const getDefaultMSW = () => [
rest.get('*', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAppControllerGetHelloMock()),
        )
      }),rest.post('*/dogs', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDogControllerCreateMock()),
        )
      }),rest.put('*/dogs', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDogControllerAddOwnerMock()),
        )
      }),rest.post('*/humans', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getHumanControllerCreateMock()),
        )
      }),]
